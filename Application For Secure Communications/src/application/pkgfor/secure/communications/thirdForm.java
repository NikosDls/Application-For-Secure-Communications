package application.pkgfor.secure.communications;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author NikosDls
 */
public class thirdForm extends javax.swing.JFrame {

    /**
     * String to hold the plain text path.
     */
    private String plainTextPath;

    /**
     * String to hold the plain text.
     */
    private String plainText = "";

    /**
     * Creates new form thirdForm
     *
     * @param width
     * @param height
     * @param plainTextPath
     * @param plainText
     */
    public thirdForm(int width, int height, String plainTextPath, String plainText) {
        initComponents();
        this.setLocation(width, height);
        this.plainTextPath = plainTextPath;
        this.plainText = plainText;
        String[] algorithms = {"RSA (asymmetric encryption)", "AES (symmetric encryption)"};
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(algorithms);
        ChooseAlgorithm.setModel(model);
    }

    public thirdForm() {
        this(0, 0, null, null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        ChooseAlgorithm = new javax.swing.JComboBox<>();
        Back = new javax.swing.JButton();
        Next = new javax.swing.JButton();
        Cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Application For Secure Communications");
        setResizable(false);

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Step 3: Choose the algorithm to encrypt the text!");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel2.setName(""); // NOI18N

        ChooseAlgorithm.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        ChooseAlgorithm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ChooseAlgorithm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseAlgorithmActionPerformed(evt);
            }
        });

        Back.setText("< Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        Next.setText("Next >");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });

        Cancel.setText("Cancel");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Back)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Next)
                .addGap(41, 41, 41)
                .addComponent(Cancel)
                .addContainerGap())
            .addComponent(ChooseAlgorithm, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ChooseAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Back)
                    .addComponent(Next)
                    .addComponent(Cancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        secondForm second = new secondForm(this.getX(), this.getY(), plainTextPath);
        this.dispose();
        second.setVisible(true);
    }//GEN-LAST:event_BackActionPerformed

    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed
        String choice = (String) ChooseAlgorithm.getSelectedItem();

        if (choice.equals("RSA (asymmetric encryption)")) {
            int keys = JOptionPane.showConfirmDialog(null, "Do you have your own pair of private and public keys?", "Key confirmation", JOptionPane.YES_NO_OPTION);
            String privateKeyPath;
            String publicKeyPath;

            if (keys == JOptionPane.NO_OPTION) {
                JFileChooser fc = new JFileChooser();

                fc.setFileSelectionMode(fc.DIRECTORIES_ONLY);
                fc.setDialogTitle("Key generation");
                fc.setCurrentDirectory(new java.io.File(System.getProperty("user.home") + "/Desktop"));

                String answer = JOptionPane.showInputDialog("Give the number of bytes for key generation:");
                if (answer == null) {
                    return;
                }

                if (answer.matches(".*[a-zA-Z]+.*") || answer.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Number of bytes must be only numbers.");
                    return;
                }

                int bytes = Integer.parseInt(answer);
                if (bytes <= 0 || bytes > 2048) {
                    JOptionPane.showMessageDialog(null, "Number of bytes must be: >0 and <=2048.");
                    return;
                }

                if (fc.showDialog(null, "Ok") == fc.APPROVE_OPTION) {
                    RSAalgorithm rsa = new RSAalgorithm();
                    privateKeyPath = fc.getSelectedFile().getAbsolutePath() + "\\private.key";
                    publicKeyPath = fc.getSelectedFile().getAbsolutePath() + "\\public.key";

                    // Check if the pair of keys are present else generate those.
                    if (!rsa.areKeysPresent(privateKeyPath, publicKeyPath)) {
                        // Method generates a pair of keys using the RSA algorithm and stores it
                        // in their respective files
                        JOptionPane.showMessageDialog(null, "Public key created to: \"" + fc.getSelectedFile().getAbsolutePath() + "\\public.key"
                                + "\nPrivate key created to: \"" + fc.getSelectedFile().getAbsolutePath() + "\\private.key");
                        rsa.generateKey(privateKeyPath, publicKeyPath, bytes);
                    } else {
                        JOptionPane.showMessageDialog(null, "Keys already exists!");
                    }
                } else {
                    return;
                }
            } else if (keys == JOptionPane.CLOSED_OPTION) {
                return;
            }

            this.dispose();
            fourthFormRSA fourth = new fourthFormRSA(this.getX(), this.getY(), plainTextPath, plainText);
            fourth.setVisible(true);
        } else if (choice.equals("AES (symmetric encryption)")) {
            this.dispose();
            fourthFormAES fourth = new fourthFormAES(this.getX(), this.getY(), plainTextPath, plainText);
            fourth.setVisible(true);
        }
    }//GEN-LAST:event_NextActionPerformed

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        System.exit(0);
    }//GEN-LAST:event_CancelActionPerformed

    private void ChooseAlgorithmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseAlgorithmActionPerformed


    }//GEN-LAST:event_ChooseAlgorithmActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(thirdForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(thirdForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(thirdForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(thirdForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new thirdForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JButton Cancel;
    private javax.swing.JComboBox<String> ChooseAlgorithm;
    private javax.swing.JButton Next;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the plainTextPath
     */
    public String getPlainTextPath() {
        return plainTextPath;
    }

    /**
     * @param plainTextPath the plainTextPath to set
     */
    public void setPlainTextPath(String plainTextPath) {
        this.plainTextPath = plainTextPath;
    }

    /**
     * @return the plainText
     */
    public String getPlainText() {
        return plainText;
    }

    /**
     * @param plainText the plainText to set
     */
    public void setPlainText(String plainText) {
        this.plainText = plainText;
    }
}
